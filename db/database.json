[
  {
    "question": "Что такое СУБД?",
    "answer": "СУБД представляет собой набор программных и аппаратных средств, с помощью которых можно проектировать, настраивать и администрировать базы данных (БД).",
    "category": "Database",
    "id": 1
  },
  {
    "question": "Примеры современных СУБД",
    "answer": "Oracle Database — объектно-реляционная клиент-серверная СУБД, одна из первых и самых популярных в мире. Платная, сложная, подходит для больших проектов.\nPostgreSQL — объектно-реляционная СУБД клиент-серверного типа, которую иногда называют бесплатным аналогом Oracle. Масштабная, рассчитана на высоконагруженные проекты, содержит огромное количество функций и распространяется бесплатно.\nMySQL — реляционная клиент-серверная СУБД. Популярный выбор для проектов небольшого и среднего размера. Легкая, гибкая и довольно простая в использовании. Она бесплатная, хорошо подходит для обучения и веб-проектов.\nMongoDB — документно-ориентированная NoSQL-СУБД, где данные хранятся в JSON-подобных файлах. Тоже бесплатная, а внутренний язык запросов основан на JavaScript.\nSQLite — маленькая и легкая встраиваемая СУБД, которая активно применяется в локальных проектах.",
    "category": "Database",
    "id": 2
  },
  {
    "question": "Что такое первичный ключ?",
    "answer": "Первичный ключ или PRIMARY KEY предназначен для однозначной идентификации \nкаждой записи в таблице и является строго уникальным (UNIQUE): \nдве записи таблицы не могут иметь одинаковые значения первичного ключа. \nНулевые значения (NULL) в PRIMARY KEY не допускаются. Если в качестве PRIMARY KEY \nиспользуется несколько полей, их называют составным ключом.\nPRIMARY KEY — это первичный ключ, который используется в качестве основного \nключа и может быть использован для связи с дочерней таблицей, содержащей внешний ключ.",
    "category": "Database",
    "id": 3
  },
  {
    "question": "А что такое внешний ключ?",
    "answer": "Внешний ключ или FOREIGN KEY также является атрибутом ограничения и \nобеспечивает связь двух таблиц. По сути, это поле или несколько полей, которые \nссылаются на PRIMARY KEY в родительской таблице.",
    "category": "Database",
    "id": 4
  },
  {
    "question": "Какие ещё ограничения вы знаете?",
    "answer": "UNIQUE — гарантирует уникальность значений в столбце;\nNOT NULL — значение не может быть NULL;\nINDEX — создаёт индексы в таблице для быстрого поиска/запросов;\nCHECK — значения столбца должны соответствовать заданным условиям;\nDEFAULT — предоставляет столбцу значения по умолчанию.",
    "category": "Database",
    "id": 5
  },
  {
    "question": "Назовите четыре основных типа соединения в SQL",
    "answer": "INNER JOIN — получение записей с одинаковыми значениями в обеих таблицах, т.е. получение пересечения таблиц.\nFULL OUTER JOIN — объединяет записи из обеих таблиц (если условие объединения равно true) и дополняет их всеми записями из обеих таблиц, которые не имеют совпадений. Для записей, которые не имеют совпадений из другой таблицы, недостающее поле будет иметь значение NULL.\nLEFT JOIN — возвращает все записи, удовлетворяющие условию объединения, плюс все оставшиеся записи из внешней (левой) таблицы, которые не удовлетворяют условию объединения.\nRIGHT JOIN — работает точно так же, как и левое объединение, только в качестве \nвнешней таблицы будет использоваться правая.",
    "category": "Database",
    "id": 6
  },
  {
    "question": " В чем разница между типом данных CHAR и VARCHAR в SQL?",
    "answer": "И Char, и Varchar служат символьными типами данных, но varchar используется для строк \nсимволов переменной длины, тогда как Char используется для строк фиксированной длины.",
    "category": "Database",
    "id": 7
  },
  {
    "question": "Что такое индекс?",
    "answer": "Индексы относятся к методу настройки производительности, позволяющему быстрее извлекать \nзаписи из таблицы. Индекс создает отдельную структуру для индексируемого поля и, \nследовательно, позволяет быстрее получать данные.",
    "category": "Database",
    "id": 8
  },
  {
    "question": "Опишите различные типы индексов.",
    "answer": "Уникальный индекс (Unique Index): этот индекс не позволяет полю иметь повторяющиеся значения, если столбец индексируется уникально. Если первичный ключ определен, уникальный индекс может быть применен автоматически.\nКластеризованный индекс (Clustered Index): этот индекс меняет физический порядок таблицы и выполняет поиск на основе значений ключа. Каждая таблица может иметь только один кластеризованный индекс.\nНекластеризованный индекс (Non-Clustered Index): не изменяет физический порядок таблицы и поддерживает логический порядок данных. Каждая таблица может иметь много некластеризованных индексов.",
    "category": "Database",
    "id": 9
  },
  {
    "question": " Объясните различные типы нормализации.",
    "answer": "Первая нормальная форма (1NF) — нет повторяющихся групп в строках\nВторая нормальная форма (2NF) — каждое неключевое (поддерживающее) значение столбца зависит от всего первичного ключа\nТретья нормальная форма (3NF) — каждое неключевое значение зависит только от первичного ключа и не имеет зависимости от другого неключевого значения столбца.",
    "category": "Database",
    "id": 10
  },
  {
    "question": "Перечислите основные агрегатные функции.",
    "answer": "COUNT - производит подсчет записей, удовлетворяющих условию запроса; \nSUM - вычисляет арифметическую сумму всех значений колонки; \nAVG - вычисляет среднее арифметическое всех значений; \nMAX - определяет наибольшее из всех выбранных значений; \nMIN - определяет наименьшее из всех выбранных значений.",
    "category": "Database",
    "id": 11
  },
  {
    "question": "Какие существуют операторы SQL?",
    "answer": "операторы определения данных (Data Definition Language, DDL):\nCREATE создает объект БД (базу, таблицу, представление, пользователя и т. д.),\nALTER изменяет объект,\nDROP удаляет объект;\nоператоры манипуляции данными (Data Manipulation Language, DML):\nSELECT выбирает данные, удовлетворяющие заданным условиям,\nINSERT добавляет новые данные,\nUPDATE изменяет существующие данные,\nDELETE удаляет данные;\nоператоры определения доступа к данным (Data Control Language, DCL):\nGRANT предоставляет пользователю (группе) разрешения на определенные операции с объектом,\nREVOKE отзывает ранее выданные разрешения,\nDENY задает запрет, имеющий приоритет над разрешением;\nоператоры управления транзакциями (Transaction Control Language, TCL):\nCOMMIT применяет транзакцию,\nROLLBACK откатывает все изменения, сделанные в контексте текущей транзакции,\nSAVEPOINT разбивает транзакцию на более мелкие.",
    "category": "Database",
    "id": 12
  }

]