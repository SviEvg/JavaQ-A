[
  {
    "question": "Что такое «модульное тестирование»?",
    "answer": "Модульное/компонентное тестирование (unit testing) - процесс в программировании, позволяю-\nщий проверить на корректность отдельные модули исходного кода программы. Идея состоит в том,\nчтобы писать тесты для каждой нетривиальной функции или метода. Это позволяет достаточно\nбыстро проверить, не привело ли очередное изменение кода к регрессии, то есть к появлению оши-\nбок в уже оттестированных местах программы, а также облегчает обнаружение и устранение таких\nошибок.",
    "category": "Testing",
    "id": 1
  },
  {
    "question": "Чем stub отличается от mock?",
    "answer": "stub используется как заглушка сервисов, методов, классов и т.д. с заранее запрограммированным\nответом на вызовы.\nmock использует подмену результатов вызова, проверяет сам факт взаимодействия, протоколирует\nи контролирует его.",
    "category": "Testing",
    "id": 2
  },
  {
    "question": "Какие аннотации фикстур существуют в JUnit?",
    "answer": "Фикстуры (fixtures) - состояние среды тестирования, которое требуется для успешного выполнения теста. \n@BeforeClass - определяет код, который должен единожды выполниться перед запуском набора\nтестовых методов.\n@AfterClass - код, выполняемый один раз после исполнения набора тестовых методов.\n@Before - определяет код, который должен выполняться каждый раз перд запуском любого тесто-\nвым методом.\n@After - код, выполняемый каждый раз после исполнения любого тестового метода.",
    "category": "Testing",
    "id": 3
  },
  {
    "question": "Для чего в JUnit используется аннотация @Ignore?",
    "answer": "@Ignore указывает JUnit на необходимость пропустить данный тестовый метод.",
    "category": "Testing",
    "id": 4
  }
]